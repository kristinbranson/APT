function varargout = ParameterSetup(varargin)
% PARAMETERSETUP MATLAB code for ParameterSetup.fig
%      PARAMETERSETUP, by itself, creates a new PARAMETERSETUP or raises the existing
%      singleton*.
%
%      H = PARAMETERSETUP returns the handle to a new PARAMETERSETUP or the handle to
%      the existing singleton*.
%
%      PARAMETERSETUP('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in PARAMETERSETUP.M with the given input arguments.
%
%      PARAMETERSETUP('Property','Value',...) creates a new PARAMETERSETUP or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ParameterSetup_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ParameterSetup_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help ParameterSetup

% Last Modified by GUIDE v2.5 09-Nov-2018 10:06:51

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @ParameterSetup_OpeningFcn, ...
                   'gui_OutputFcn',  @ParameterSetup_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


function ParameterSetup_OpeningFcn(hObject, eventdata, handles, varargin)

% Tree GUI for parameter configuration
% 
% sPrm = ParameterSetup(hParent,tree)
% sPrm = ParameterSetup(hParent,tree,'labelerObj',lObj) % do parameter
%   visualization
%
% hParent: not a real parent, just figure over which window is centered
% tree: TreeNode tree, generated by parseConfigYaml()
%
% sPrm: If "Apply" is pushed, parameter structure; otherwise, []

hParent = varargin{1};
handles.tree = varargin{2};
pvargs = varargin(3:end);

handles.labelerObj = myparse(pvargs,...
  'labelerObj',[]);
tfLabelerSupplied = ~isempty(handles.labelerObj);

hFig = handles.figParameterSetup;
centerOnParentFigure(hFig,hParent);

% cbk for toggling parameter viz pane
% oldunitsViz = handles.pnlViz.Units;
% oldunitsSetup = handles.figParameterSetup.Units;
% handles.pnlViz.Units = 'pixels';
% handles.figParameterSetup.Units = 'pixels';
% assert(strcmp(handles.pnlViz.Units,'pixels'));
% assert(strcmp(handles.figParameterSetup.Units,'pixels'));
handles.pnlViz.Units = 'pixels';
handles.pnlVizPos0 = handles.pnlViz.Position;
handles.pnlViz.Units = 'normalized';

handles.pnlParams.Units = 'pixels';
handles.pnlParamsPos0 = handles.pnlParams.Position;
handles.pnlParams.Units = 'normalized';
handles.figParameterSetupPos0 = handles.figParameterSetup.Position;
cbkToggleParamVizPane = @(varargin)toggleParamVizPane(hFig,varargin{:});

addPBViz = false && tfLabelerSupplied && ...
  handles.labelerObj.trackDLBackEnd.type==DLBackEnd.Docker;
if addPBViz
  handles = addVizButton(handles);  
end

mc = ?PropertyLevelsEnum;
levels_str = {mc.EnumerationMemberList.Name};
levels = PropertyLevelsEnum(levels_str);
[~,minlevel] = min(levels);
handles.maxlevel = PropertyLevelsEnum(max(levels));
set(handles.popupmenu_level,'String',levels_str,'Value',minlevel);
handles.level = levels(minlevel);

assert(isa(handles.tree,'TreeNode') && isscalar(handles.tree));
% for cosmetic purposes, don't include Dummy/Root node in propertiesGUI
assert(strcmp(handles.tree.Data.Field,'ROOT'));
rootnode = TreeNode(handles.tree.Data);
if tfLabelerSupplied
  pvh = ParameterVizHandler(handles.labelerObj,handles.figParameterSetup,...
    handles.axViz,cbkToggleParamVizPane);
  pvh.init();
else
  pvh = [];
end
setappdata(hFig,'parameterVizHandler',pvh);
setPropertiesPanel(handles);
setappdata(hFig,'rootnode',rootnode); % save to glue rootnode back on at output


ax = handles.axViz;
ax.XTick = [];
ax.YTick = [];

handles.output = [];

guidata(handles.figParameterSetup,handles);

cbkToggleParamVizPane(false);


uiwait(hFig);
% UIWAIT makes ParameterSetup wait for user response (see UIRESUME)

function handles = addVizButton(handles)

posApp = handles.pbApply.Position;
posCcl = handles.pbCancel.Position;
h = copyobj(handles.pbApply,handles.pbApply.Parent);
dx = posApp(1)-posCcl(1);
h.Position(1) = h.Position(1) + dx;
h.String = 'Visualize';
h.Callback = @pbVisualize_Callback;
handles.pbVisualize = h;
handles.popupmenu_level.Position(3) = handles.popupmenu_level.Position(3)+dx;


function setPropertiesPanel(handles,varargin)

[dofilter] = myparse(varargin,'dofilter',true);

if dofilter,
  APTParameters.setAllVisible(handles.tree);
  APTParameters.filterPropertiesByCondition(handles.tree,handles.labelerObj);
  APTParameters.filterPropertiesByLevel(handles.tree,handles.level);
end

children = handles.tree.Children;
pvh = getappdata(handles.figParameterSetup,'parameterVizHandler');
if isempty(pvh),
  propertiesGUI2(handles.pnlParams,children,...
    'paramCheckerFcn',@paramChecker,... %    'paramConstraints',ParameterTreeConstraint.defaultAPTConstraints,...
    'okButtons',handles.pbApply);
else
  propertiesGUI2(handles.pnlParams,children,'parameterVizHandler',pvh,...
    'paramCheckerFcn',@paramChecker,... %    'paramConstraints',ParameterTreeConstraint.defaultAPTConstraints,...
    'okButtons',handles.pbApply);
end

function varargout = ParameterSetup_OutputFcn(hObject, eventdata, handles) 
varargout{1} = handles.output;
delete(handles.figParameterSetup);

function pbApply_Callback(hObject, eventdata, handles)
% AL20180301 iss #105, a cell may be "mid-edit". Force stop editing before
% proceeding
hFig = handles.figParameterSetup;
hgrid = getappdata(hFig,'hgrid');
ce = hgrid.getCellEditor();
if ~isempty(ce)
  ce.stopCellEditing();
  drawnow; % otherwise this method can finish, deleting hFig, before propupdated callback fires
end

%handles.level = handles.maxlevel;
%guidata(hObject,handles);
%setPropertiesPanel(handles,'dofilter',false);
drawnow;
t = getappdata(hFig,'mirror');
rootnode = getappdata(hFig,'rootnode');
rootnode.Children = t;
s = rootnode.structize();
%hObj = getappdata(hFig,'outputObj');
%hObj.data = s;
handles.output = s;
guidata(handles.figParameterSetup,handles);
close(handles.figParameterSetup);

function pbCancel_Callback(hObject, eventdata, handles)
handles.output = [];
guidata(handles.figParameterSetup,handles);
close(handles.figParameterSetup);

function figParameterSetup_CloseRequestFcn(hObject, eventdata, handles)
pvh = getappdata(hObject,'parameterVizHandler');
if ~isempty(pvh)
  % AL 20180324. Explicitly delete the ParameterVizHandler. If this is not
  % done, instances seem to hang around when eg 'clear classes' or the like
  % is done. (This may or may not be that bad but explicit deletion keeps
  % it clean.)
  delete(pvh);
end
if isequal(get(hObject,'waitstatus'),'waiting')
% The GUI is still in UIWAIT, us UIRESUME
  uiresume(hObject);
else 
  delete(hObject);
end

function toggleParamVizPane(hFig,tfParamViz,tfBusy)

handles = guidata(hFig);
handles.pnlParams.Units = 'pixels';
handles.pnlViz.Units = 'pixels';
pnlVizPos = handles.pnlViz.Position;
pnlParamsPos = handles.pnlParams.Position;
hFig.Units = 'pixels';
handles.pbApply.Units = 'pixels';
handles.pbCancel.Units = 'pixels';
handles.popupmenu_level.Units = 'pixels';
if tfParamViz
  handles.pnlViz.Position(3) = handles.pnlVizPos0(3)*pnlParamsPos(3)/handles.pnlParamsPos0(3);
  hFig.Position(3) = handles.figParameterSetupPos0(3)*pnlParamsPos(3)/handles.pnlParamsPos0(3);
else
  hFig.Position(3) = pnlVizPos(1)-1;
end
handles.pnlParams.Units = 'normalized';
handles.pnlViz.Units = 'normalized';
handles.pbApply.Units = 'normalized';
handles.pbCancel.Units = 'normalized';
handles.popupmenu_level.Units = 'normalized';

if nargin >= 3 && tfBusy,
  ParameterVisualization.grayOutAxes(handles.axViz,'Computing visualization. Please wait...');
  drawnow;
end


% --- Executes on selection change in popupmenu_level.
function popupmenu_level_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_level (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_level contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_level

contents = cellstr(get(hObject,'String'));
level_str = contents{get(hObject,'Value')};
handles.level = PropertyLevelsEnum(level_str);
guidata(hObject,handles);
setPropertiesPanel(handles);

% --- Executes during object creation, after setting all properties.
function popupmenu_level_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_level (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end
