# * Each node has a list of metadata:
# - 1 - pretty name (displayed). Note, the node name/identifier itself is also meaningful as the fieldname in the data struct. 
# - 2 - type (see PropertiesGUIProp.m for options)
# - 3 - isEditable
# - 4 - description
# - 5 - default value
# - 6 - visualization function
# - 7 - level - one of {'Important','Beginner','Advanced','Developer'}. All important features need to be reset for each project. Default values should work for all non-Important features, but better results could potentially be achieved by changing these. The rest of the parameters are split into those that often are helpful to adjust (Beginner), those that should be rarely adjusted (Intermediate), and those that only someone working with a developer should touch. This property is only used for leaf nodes. Level of non-leaf nodes is based on maximum level of children, with important being highest, developer being lowest. 
# - 8 - requirements - some parameters will only be used in certain kinds of projects. list here keys for including these parameters. Non-leaf nodes included if any child node is included. 
# * After the metadata comes a list of child nodes.
# * As a shortcut, leaf nodes can contain the metadata directly as their value.
ROOT:
  - ['','',false,DUMMY,'','','','']
  - CPR:
    - ['','',false,'Settings for the Cascaded Pose Regression (CPR) tracking algorithm.','','','','']
    - NumMajorIter: ['Num regression stages',unsigned,true,'Number of stages of regression. Each stage of regression predicts an update to the current pose estimate. More stages generally perform better, but are also slower in both training and tracking. If the training accuracy is poor, consider increasing the number of stages.',50,'ParameterVisualizationCPR#cpr1','Advanced','isCPR',true]
    - NumMinorIter: ['Num boosted regressors',unsigned,true,'Number of regressors (random ferns) combined (ensembled) in each stage of regression. More regressors generally performs better, but are also slower in both training and tracking. If the training accuracy is poor, consider increasing the number of regressors.',30,'ParameterVisualizationCPR#cpr1','Advanced','isCPR',true]
    - Ferns:
      - ['','',false,Random ferns,'','','','isCPR']
      - Depth: ['',unsigned,true,'Depth of the random fern, similar to the depth of a decision tree. This corresponds to the number of features used for fern binning. Larger depths may improve accuracy if the training accuracy is poor.',5,'ParameterVisualizationCPR#cpr1' ,'Advanced','isCPR',true]
      - Threshold:
        - ['','',false,Random fern thresholds,'','','','']
        - Lo: ['',float,true,'Random ferns are constructed very randomly. (Somewhat) random features are chosen and then they are thresholded at randomly chosen values. Set the lower range of the thresholds here. Features should be in the range of -1 to 1.',-.2,'','Advanced','isCPR',true]
        - Hi: ['',float,true,'Random ferns are constructed very randomly. (Somewhat) random features are chosen and then they are thresholded at randomly chosen values. Set the upper range of the thresholds here. Features should be in the range of -1 to 1.',.2,'','Advanced','isCPR',true]
      - RegFactor: ['Regularization factor',float,true,'Regularization factor for random fern bins with low counts. Bin counts in random ferns are at minimum this factor times the total number of training samples.',.01,'','Advanced','isCPR',true]
    - Feature:
      - ['','',false,'CPR begins by transforming the input image into a sequence of "features". These parameters are related to how these features are chosen.','','','','isCPR']
      - Type: ['',['two landmark elliptical','single landmark','2lm','2lmdiff'],true,'How feature locations are chosen. CPR regression takes as input pixel intensities at locations in the image that are chosen relative to the current estimates of the part locations. The initial pool of feature locations is chosen randomly from regions specified by landmarks as follows. * two landmark elliptical: a pair of parts (landmarks) are first chosen randomly. Then, a location is chosen randomly from within an ellipse around these two landmarks. The major axis of this ellipse is aligned with the direction between the two landmarks, the major axis length is the distance between the points multiplied by the Radius (Advanced) parameter below, and the minor axis length is set to the major axis length divided by the ABRatio (Advanced) parameter below. * single landmark: A single landmark is chosen, then a location is chosen randomly within a circle around the landmark location with radius defined by the Radius parameter (in pixels) below. * 2lm: Deprecated. Do not use this. * 2lmdiff: Deprecated. Do not use this.','2lm','ParameterVisualizationFeature#feature1','Beginner','isCPR',true]
      - Radius: ['',float,true,'Parameter defining the size of the ellipse or circle from which feature locations are selected (see Feature Type above). For two landmark elliptical feature type, this is a multiplier for the distance between the landmark pair that defines the major axis length. For single landmark feature type, this is the radius of the circle in pixels.',1.5,'ParameterVisualizationFeature#feature1','Beginner','isCPR',true]
      - ABRatio: ['Major/minor axis ratio',float,true,'Ratio of ellipse major/minor axes. This parameter is only applicable when feature type two landmark elliptical is selected.',2,'ParameterVisualizationFeature#feature1','Advanced','isCPR',true]
      - Metatype: ['Feature function',['single','diff'],true,'How features are computed from the image and selected feature locations (see Feature Type above). If single is selected, the feature for a selected pixel location is the corresponding image intensity. If diff is selected, each feature corresponds to a pair of locations, and the difference in image intensity is computed.','diff','','Beginner','isCPR',true]
      - NGenerate: ['Pool size',unsigned,true,'For each stage of regression, a large pool of features are generated, and a subset of them are selected based on their correlation with the output variable. The larger this number, the slower training and testing will be.',400,'ParameterVisualizationCPR#cpr1','Advanced','isCPR',true]
      - Nsample_std: ['Num samples std',unsigned,true,'Number of samples used to approximate standard deviation when computing correlation between features and regression output during feature selection. The higher this number, the more accurate standard deviation computation will be, but the slower training will be.',1000,'ParameterVisualizationCPR#cpr1','Beginner','isCPR',true]
      - Nsample_cor: ['Num samples correlation',unsigned,true,'Number of samples used to approximate correlation between features and regression output during feature selection. The higher this number is, the more accurate the correlation computation will be, but the slower training will be.',5000,'ParameterVisualizationCPR#cpr1','Beginner','isCPR',true]
    - RotCorrection:
      - ['Rotational Invariance','',false,'Are the directions of the x- and y-axes in the image arbitrary with respect to the animals'' positions, as would be the case for an overhead view of the animals, or are they meaningful, as would be the case if the y-axis corresponds to the up direction in the world?','']
      - OrientationType: ['Movie Orientation',['fixed','arbitrary'],true,'Are the directions of the x- and y-axes in the image arbitrary with respect to the animals'' positions, as would be the case for an overhead view of the animals, or are they meaningful, as would be the case if the y-axis corresponds to the up direction in the world? * fixed: The directions of the x- and y-axes *are* meaningful, and we do *not* want our tracker to be rotationally invariant. This would be the case in side views of animals, in which the y-axis corresponds to the up direction in the real world. * arbitrary: The directions of the x- and y-axes are *not* meaningful. To make the tracker rotation invariant, CPR performs regression in a coordinate system based on the current pose estimate, with the x-axis corresponding to the direction between a pair of landmarks, the TailPoint and HeadPoint, specified below.','fixed','ParameterVisualizationCPRInit#CPRInit1','Important','isCPR',true]
      - HeadPoint: ['Head landmark',unsigned,true,'Identity of the landmark (part) corresponding to the animal''s head - the front of the animal. This parameter is only used if OrientationType is arbitrary or arbitrary trx-specified. To make the tracker rotation invariant, CPR performs regression in a coordinate system based on the current pose estimate, with the x-axis corresponding to the direction between a pair of landmarks, the TailPoint and HeadPoint. See Orientation parameter description for more information.',1,'','Important','isCPR',true]
      - TailPoint: ['Tail landmark',unsigned,true,'Identity of the landmark (part) corresponding to the animal''s tail - the back of the animal. This parameter is only used if OrientationType is arbitrary or arbitrary trx-specified. To make the tracker rotation invariant, CPR performs regression in a coordinate system based on the current pose estimate, with the x-axis corresponding to the direction between a pair of landmarks, the TailPoint and HeadPoint. See Orientation parameter description for more information.',2,'','Important','isCPR',true]
    - Replicates:
      - ['Training and test initialization parameters','',false,'CPR is an iterative algorithm that begins with an initial pose estimate. We train using multiple initializations, effectively augmenting our training data set. These parameters relate to how and how many times we reinitialize.']
      - NrepTrain: ['Num training replicates',unsigned,true,'Training set augmentation factor. Each training example is utilized/replicated this many times during training, each corresponding to a different pose initialization. Bigger numbers may improve accuracy, but will also slow down training.',50,'','Beginner','isCPR',true]
      - NrepTrack: ['Num tracking replicates',unsigned,true,'Number of reinitializations used when tracking. The final tracking output is estimated using the distribution of final pose estimates corresponding to each of these initializations. Bigger numbers may improve accuracy, but will also slow down tracking.',50,'','Beginner','isCPR',true]
      - DoPtJitter: ['Jitter initial shapes',boolean,true,'To choose initial poses, we select a random training pose and adjust the pose by jittering and rotating (depending on the choice of OrientationType above). This parameter determines whether we jitter (randomly translate) individual landmarks.',true,'ParameterVisualizationCPRInit#CPRInit1','Advanced','isCPR',true]
      - PtJitterFac: ['Initial shape jitter/randomization factor',float,true,'To choose initial poses, we select a random training pose and adjust the pose by jittering and rotating (depending on the choice of OrientationType above). This parameter determines how much we jitter (randomly translate) individual landmarks. Points in initial shape are jittered by the reciprocal of this factor. For instance, a value of 12 indicates jittering by 1/12th of the image/ROI size. This parameter is only used if DoPtJitter is true.',12,'ParameterVisualizationCPRInit#CPRInit1','Advanced','isCPR',true]
      - DoBBoxJitter: ['Jitter initial shape locations',boolean,true,'To choose initial poses, we select a random training pose and adjust the pose by jittering and rotating (depending on the choice of OrientationType above). This parameter determines whether we perturb the centroids of the initializations relative to the image/region of interest.',true,'ParameterVisualizationCPRInit#CPRInit1','Advanced','isCPR',true]
      - AugJitterFac: ['Initial shape location jitter/randomization factor',float,true,'To choose initial poses, we select a random training pose and adjust the pose by jittering and rotating (depending on the choice of OrientationType above). This parameter determines how much we perturb the centroids of the initializations relative to the image/region of interest. The initial shape centroid is jittered by the reciprocal of this factor. For instance, a value of 12 indicates that initial shapes will be shifted by 1/12th of the image/ROI size.',16,'ParameterVisualizationCPRInit#CPRInit1','Advanced','isCPR',true]
      - AugUseFF: ['Maximize spread of initial conditions',boolean,true,'To choose initial poses, we select a random training pose and adjust the pose by jittering and rotating. We can maximize the distance between initializations by using the furthest-first algorithm, which starts by randomly selecting one training pose, then selecting the training pose farthest from this one, then selecting the training pose farthest from both of these, etc. This parameter controls whether to use the furthest-first algorithm for initialization.',false,'ParameterVisualizationCPRInit#CPRInit1','Advanced','isCPR',true] # CONFIRM TIED TOGETHER
    - Prune:
      - ['Post-processing','',false,'Parameters related how we choose a single trajectory from the clouds of pose estimates resulting from multiple tracking initializations.']
      - Method: ['',['median','maxdensity','maxdensity global','smoothed trajectory'],true,'Algorithm for selecting a single pose estimate per frame. * median: The median of the x- and y- positions is taken independently for each landmark. * maxdensity: For each landmark independently, each replicate votes for other replicates based on how close they are (voting neighborhood size determined by "Density length scale" below). The replicate with the most votes is chosen. * maxdensity global: For all landmarks jointly, each replicate votes for other replicates (neighborhood size determined by DensitySigma below) based on how close they are. The replicate with the most votes is chosen. * smoothed trajectory: Uses dynamic programming to find a trajectory that is both smooth and has high density, computed as in maxdensity global above. The relative weight of the smoothness of motion criterion to the density criterion is "Trajectory smoothing weight factor". This is the only type of post-processing that takes into account multiple frames.','maxdensity','','Beginner','isCPR',true]
      - DensitySigma: ['Density length scale',float,true,"Length scale (in pixels) for Gaussian kernel used during post-processing. Used for 'maxdensity', 'maxdensity global', and 'smoothed trajectory' methods. Larger values include more distant shapes when computing a given shape's likelihood.",5,'','Beginner','isCPR']
      - PositionLambdaFactor: ['Trajectory smoothing weight factor',float,true,"Scale factor applied to empirically-estimated ratio balancing trajectory smoothness against replicate density. Larger values upweight smoother trajectories. Used only for 'smoothed trajectory' method.",1,'','Beginner','isCPR',true]